
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      Flex4Demo
 *  Source:     /Users/simeon/Sites/clients/alagad/Flex4Demo/src/Flex4Demo.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2009.04.21 20:38:50 PDT
 */

package 
{

import components.MyButton;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;
import skins.MyRedButtonSkin;
import spark.components.Application;
import spark.components.Button;
import spark.components.Group;
import spark.layout.supportClasses.LayoutBase;


[Frame(extraClass="_Flex4Demo_FlexInit")]

[Frame(factoryClass="_Flex4Demo_mx_managers_SystemManager")]


//  begin class def
public class Flex4Demo
    extends spark.components.Application
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _Flex4Demo_Group1 : spark.components.Group;

/**
 * @private
 **/
    public var _Flex4Demo_MyButton1 : components.MyButton;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function Flex4Demo()
    {
        super();


		var bindings:Array = _Flex4Demo_bindingsSetup();
		var watchers:Array = [];

		var target:Flex4Demo = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Flex4DemoWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					function(propertyName:String):* { return Flex4Demo[propertyName]; },
					bindings,
					watchers);

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // our style settings


        // ambient styles
        mx_internal::_Flex4Demo_StylesInit();

        // properties
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_Flex4Demo_Array1_c);


        // events










		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

    }

    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 7 - 10

			import spark.layout.VerticalLayout;
			import skins.MyRedButtonSkin;
		

    //  end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _Flex4Demo_Array1_c() : Array
{
	var temp : Array = [_Flex4Demo_Group1_i()];
	return temp;
}

private function _Flex4Demo_Group1_i() : spark.components.Group
{
	var temp : spark.components.Group = new spark.components.Group();
	temp.mxmlContent = [_Flex4Demo_MyButton1_i(), _Flex4Demo_MyButton2_c(), _Flex4Demo_Button1_c(), _Flex4Demo_Button2_c()];
	temp.id = "_Flex4Demo_Group1";
	if (!temp.document) temp.document = this;
	_Flex4Demo_Group1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_Flex4Demo_Group1", _Flex4Demo_Group1);
	return temp;
}

private function _Flex4Demo_MyButton1_i() : components.MyButton
{
	var temp : components.MyButton = new components.MyButton();
	temp.label = "custom red";
	temp.id = "_Flex4Demo_MyButton1";
	if (!temp.document) temp.document = this;
	_Flex4Demo_MyButton1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_Flex4Demo_MyButton1", _Flex4Demo_MyButton1);
	return temp;
}

private function _Flex4Demo_MyButton2_c() : components.MyButton
{
	var temp : components.MyButton = new components.MyButton();
	temp.label = "custom default";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _Flex4Demo_Button1_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.label = "spark";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _Flex4Demo_Button2_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.label = "spark red";
	temp.setStyle("skinClass", skins.MyRedButtonSkin);
	if (!temp.document) temp.document = this;
	return temp;
}


	//	binding mgmt
    private function _Flex4Demo_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():spark.layout.supportClasses.LayoutBase
            {

                return (new VerticalLayout());
            },
            null,
            "_Flex4Demo_Group1.layout");
        result[1] = new mx.binding.Binding(this,
            function():Class
            {

                return (skins.MyRedButtonSkin);
            },
            null,
            "_Flex4Demo_MyButton1.mySkinClass");

        return result;
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (Flex4Demo)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;

	//	initialize style defs for Flex4Demo

	mx_internal static var _Flex4Demo_StylesInit_done:Boolean = false;

	mx_internal function _Flex4Demo_StylesInit():void
	{
		//	only add our style defs to the StyleManager once
		if (mx_internal::_Flex4Demo_StylesInit_done)
			return;
		else
			mx_internal::_Flex4Demo_StylesInit_done = true;
			
			        var style:CSSStyleDeclaration;
			        var effects:Array;
        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

		StyleManager.mx_internal::initProtoChainRoots();
	}


    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
